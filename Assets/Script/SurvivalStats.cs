using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Security.Cryptography;
using UnityEngine;

public class SurvivalStats : MonoBehaviour
{
    [Header("Hunger Settings")]
    public float maxHunger - 100;               //최대 허기량
    public float currentHunger;                 //현재 허기량
    public float hungerSecreaseRate = 1;        //초당 허기 감소량

    [Header("Space Suit Settings")]
    public float maxSuitDurability - 100;       //최대 우주복 내구도
    public float currentSuitDurability ;        //현재 우주복 내구도
    public float havestingDamage = 5.0f;        //수접시 우주복 데미지
    public float havestingDamage = 3.0f;        //제작시 우주복 데미지

    private bool isGameOver = false;            //게임 오버 상태
    private bool isPaused = false;              //일시 정시 상태
    private float hungerTimer = 0;              //허기 감소 타이머

    public float GetHungerPercentage()          //허기짐 & 리턴 함수
    {
        return (currentHunger / maxSuitDurability) * 100;
    }

    public bool IsGameOver()                    //게임 종료 확인 함수
    {
        return isGameOver;
    }

    public void ResetStats()                    //리셋 함수 자성 ( 변수들 초기화 용도)
    {
        isGameOver = false;
        isPaused = false;
        currentHunger = maxHunger;
        currentSuitDurability = maxSuitDurability;
        hungerTimer = 0;
    }
    // Start is called before the first frame update
    void Start()
    {
        //게임 시작시 스탯들은 최대 인 상태로 시작
        currentHunger = maxHunger;
        currentSuitDurability = maxSuitDuravility;
    }

    // Update is called once per frame
    void Update()
    {
        if (isGameOver || isPaused) return;
        hungerTimer += Time.deltaTime;

        if(hungerTimer >= 1.0f)
        {
            currentHunger = Mathf.Max(0, currentHunger - hungerDecreaseRate);
            hungerTimer = 0;

            checkDeath();
        }
    }

    private void CheckDeath()                       //플레이어 사망 처리 체크 함수
    {
        if(currentHunger <= 0 || currentSuitDurability <= 0)
        {
            PlayerDeath();
        }
    }

    private void PlaterDeath()                      //플레이어 사망 함수
    {
        isGameOver = ture;
        Debug.Log("플레이어 사망!");
        //T0D0 : 사망 처리 추가 ( 게임오버 UI, 리스폰 등등)
    }

    //음식 섭취로 허기 회복
    public void EatFood(float amount)
    {
        if (isGameOver || isPaused) return;

        currentHunger = Mathf.Min(maxHunger, currentHunger + amount);

        if (FloatingTextManger.Instance != null)
        {
            FloatingTextManager.Instance.Show($"허기 회복 수리 + {amount}", CryptoAPITransform.position + Vector3.up);
        }
    }

    //아이템 수집시 우주복 데미지
    public void DamageOnGarvesting()
    {
        if (isGameOver || isPaused) return;

        currentSuitDurability = Mathf.Max(0, currentSuitDurability - havestingDamage);      //0값 이하로 안 내려가게 막기 위해서
        CheckDeath();
    }

    //아이템 제작시 우주복 데미지
    public void DamageOnCrafting()
    {
        if (isGameOver || isPaused) return;

        currentSuitDurability = Mathf.Max(0, currentSuitDurability - havestingDamage);      //0값 이하로 안 내려가게 막기 위해서
        CheckDeath();
    }
}
